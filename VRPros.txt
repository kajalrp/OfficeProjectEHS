using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using EHS.BusinessLayer;

namespace EasyHousingSolution
{
    /// <summary>
    /// Interaction logic for Admin.xaml
    /// </summary>
    public partial class Admin : Window
    {
        public Admin()
        {
            InitializeComponent();
            cmbSellerCity.ItemsSource = sellerBL.ViewCity().ToList();
            cmbSellerCity.DisplayMemberPath = "CityName";
            cmbonwer.ItemsSource = sellerBL.ViewOwner().ToList();
            cmbonwer.DisplayMemberPath = "FirstName";
        }
        BuyerBL buyerBL = new BuyerBL();
        Buyer buyer = new Buyer();
        SellerBL sellerBL = new SellerBL();
        Seller seller = new Seller();
        State state = new State();
        City city = new City();
        Property prop = new Property();

       

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Region();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        public void Region()
        {
            SellerFunc SellerFuncObj = new SellerFunc();
            try
            {

                List<SellerFunc> region = new List<SellerFunc>();
                List<Property> prop1 = new List<Property>();
                City ct = (City)cmbSellerCity.SelectedValue;
                seller.CityId = sellerBL.getCityId(ct.CityName);

                prop.PropertyId= sellerBL.getPropertytID(seller.CityId);
                var region1 = from city in region

                              where ct.CityId == seller.CityId && seller.CityId == prop.PropertyId
                              select prop.PropertyName;

                MessageBox.Show("the Property name is" +region1);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            try
            {
                PropertyByOwner();

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        public void PropertyByOwner()
        {
            try
            { 
                List<SellerFunc> owner = new List<SellerFunc>();
                List<Property> prop1 = new List<Property>();
                Seller st = (Seller)cmbonwer.SelectedItem;
                seller.SellerId = sellerBL.getSellerId(st.FirstName);
                var own = from owner1 in owner
                          where st.SellerId == seller.SellerId && seller.SellerId == prop.PropertyId
                          select prop.PropertyName;

                MessageBox.Show("the Property name is" + own);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            Console.ReadLine();
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            try
            {


                DeleteProperty();

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        public void DeleteProperty()
        {
            try
            {

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
    }
}
----------------------------------------------------------------------------------------------------



 <Grid>
        <!--<Label Content="Administrator Page" FontSize="30" HorizontalAlignment="Left" Margin="155,63,0,0" VerticalAlignment="Top"/>
        <Button Content="View Property By Region" FontSize="18"  HorizontalAlignment="Left" Margin="155,219,0,0" VerticalAlignment="Top" Width="255" Click="Button_Click_1"/>
        <Button Content="View Property By Owner" FontSize="18"  HorizontalAlignment="Left" Margin="155,269,0,0" VerticalAlignment="Top" Width="255" Click="Button_Click_2"/>
        <Button Content="Delete property"  FontSize="18" HorizontalAlignment="Left" Margin="155,316,0,0" VerticalAlignment="Top" Width="255" RenderTransformOrigin="0.714,-0.577" Click="Button_Click_3"/>-->
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition Width="auto"/>
        </Grid.ColumnDefinitions>
        <TextBlock Text="Administrator Page" FontSize="20" Grid.ColumnSpan="2" HorizontalAlignment="Center" Grid.Row="0" Grid.Column="0" Margin="19,0,-184,20" Width="373"/>

        <TextBlock Text="Product Name" Grid.Row="1" Grid.Column="0" Margin="5"/>
        <TextBlock FontFamily="Calibri" FontWeight="DemiBold" FontSize="20" Foreground="AntiqueWhite" Padding="2" Margin="0,0,0,0" 
                   Grid.Column="0" Grid.Row="1
                   ">view Property by Region</TextBlock>
        <ComboBox Grid.Column="1" Grid.Row="1" Opacity="0.7" Margin="0,1,-155,0" Name="cmbSellerCity"/>
        <Button Grid.Column="2" Grid.Row="1" Content="Submit" Margin="180,1,-180,28" Grid.RowSpan="2" Click="Button_Click"></Button>

        <TextBlock FontFamily="Calibri" FontWeight="DemiBold" FontSize="20" Foreground="AntiqueWhite" Padding="2" Margin="0,0,0,0" Grid.Column="0" Grid.Row="2
                   ">view Property by owner</TextBlock>

        <ComboBox Grid.Column="1" Grid.Row="2" Opacity="0.7" Margin="0,1,-155,0" Name="cmbonwer" />
        <Button Grid.Column="2" Grid.Row="2" Content="Submit" Margin="180,1,-180,28" Grid.RowSpan="3" Click="Button_Click_2">
        </Button>



        <Button FontFamily="Calibri" FontWeight="Regular" FontSize="20" 
                Padding="2" Margin="0,0,0,0" 
                   Grid.Column="0" Grid.Row="3" Click="Button_Click_1">Delete the Property</Button>




    </Grid>


----------------------------------------------------------------------------------------------------------------------------------------------



  public class SellerBL
    {
        Training_24Oct18_PuneEntities sellerDbContext = null;
        public static int sellerID;
        public static string sellerName;
        public SellerBL()
        {
            sellerDbContext = new Training_24Oct18_PuneEntities();
        }
        //Doing Validatioon
        public static bool ValidateSeller(Seller seller)
        {

            StringBuilder objSB = new StringBuilder();
            bool validateSeller = true;

            if (seller.FirstName == string.Empty)
            {
                validateSeller = false;
                objSB.Append(Environment.NewLine + "First Name Required");

            }
            if (seller.LastName == string.Empty)
            {
                validateSeller = false;
                objSB.Append(Environment.NewLine + "Last Name Required");

            }
            string strEMail = seller.EmailId;
            Regex regx = new Regex(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$");
            Match match = regx.Match(strEMail);
            if (!match.Success)
            {
                validateSeller = false;
                objSB.Append(Environment.NewLine + "EMail ID not Correct");

            }

            if (seller.PhoneNo.ToString().Length != 10)
            {
                validateSeller = false;
                objSB.Append(Environment.NewLine + "Phone Number not Correct");

            }
            if (seller.Address == string.Empty)
            {
                validateSeller = false;
                objSB.Append(Environment.NewLine + "Address Required");

            }
            if (seller.Password == string.Empty)
            {
                validateSeller = false;
                objSB.Append(Environment.NewLine + "Password Required");

            }

            if (validateSeller == false)
            {
                throw new EHSExceptionClass(objSB.ToString());
            }

            return validateSeller;

        }

        public bool AddSeller(Seller seller)
        {
            bool isAdd = false;
            try
            {
                if (ValidateSeller(seller))
                {
                    sellerDbContext.Sellers.Add(seller);
                    int i = sellerDbContext.SaveChanges();
                    if (i > 0)
                        isAdd = true;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return isAdd;
        }



        public IEnumerable<State> ViewState()
        {
            IQueryable<State> stateList;
            #region Linq query
            try
            {


                stateList = from statesObj in sellerDbContext.States
                            select statesObj;

                #endregion
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return stateList;
        }

        public int getPropertytID(string firstName)
        {
            throw new NotImplementedException();
        }

        public int getStateId(string stateName1)
        {
            State stateObj;
            List<State> stateList = sellerDbContext.States.ToList();
            try
            {
                #region
                stateObj = stateList.FirstOrDefault(st => st.StateName == stateName1);
                #endregion
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return stateObj.StateId;
        }
        public IEnumerable<City> ViewCity()
        {
            IQueryable<City> cityList;
            #region Linq query
            try
            {


                cityList = from citiesObj in sellerDbContext.Cities

                           select citiesObj;

                #endregion
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return cityList;
        }
        public int getCityId(string cityName1)
        {
            City cityObj;
            List<City> cityList = sellerDbContext.Cities.ToList();
            try
            {
                #region
                cityObj = cityList.SingleOrDefault(st => st.CityName == cityName1);
                #endregion
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return cityObj.CityId;
        }

        public int getSellerId(string name)
        {
            Seller selobj;
            List<Seller> sellerList = sellerDbContext.Sellers.ToList();
            try
            {
                selobj = sellerList.SingleOrDefault(s => s.FirstName == name);
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return selobj.SellerId;
        }

        public void GetSellerId(string _sUsrId)
        {
            List<Seller> sellerList = sellerDbContext.Sellers.ToList();
            #region Linq Querry
            var id = sellerList.Single(selId => selId.UserName == _sUsrId);
            #endregion

            sellerID = id.SellerId;
        }

        public int getPropertytID(int propID)
        {
            Property objProp;
            List<Property> propList = sellerDbContext.Properties.ToList();
            try
            {
                #region
                objProp = propList.SingleOrDefault(st => st.PropertyId == propID);
                #endregion
            }
            catch (Exception e)
            {
                throw e;
            }
            return objProp.PropertyId;

        }

/*
        public string ViewOwner()
        {
            List<Seller> ownerList = sellerDbContext.Sellers.ToList();
            #region Linq Querry
            var _name = ownerList.Single(selName => selName.UserName);
            #endregion


            sellerName = _name.FirstName;
            return sellerName;
        }*/

        public IEnumerable<Seller> ViewOwner()
        {
            IQueryable<Seller> ownerList;
            #region Linq query
            try
            {


                //ownerList = from objSel in sellerDbContext.Sellers
                //            select objSel.FirstName;
                ownerList = from obj in sellerDbContext.Sellers
                            select obj;

                #endregion
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return ownerList;
        }
